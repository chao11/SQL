# Aggregate(合计 集合) Functions  
--------------------------------------------------------
Aggregate functions combine multiple rows together to form a single value of more meaningful information.
    COUNT takes the name of a column(s) as an argument and counts the number of rows where the value(s) is not NULL.
    GROUP BY is a clause used with aggregate functions to combine data from one or more columns.
    SUM() takes the column name as an argument and returns the sum of all the values in that column.
    MAX() takes the column name as an argument and returns the largest value in that column.
    MIN() takes the column name as an argument and returns the smallest value in that column.
    AVG() takes a column name as an argument and returns the average value for that column.
    ROUND() takes two arguments, a column name and the number of decimal places to round the values in that column.

=====================================================================================================================================
# Multiple tables
-------------------------------------------------------
【 CREATE TABLE artists(id INTEGER PRIMARY KEY, name TEXT)】

Using the CREATE TABLE statement we added a PRIMARY KEY to the id column.
A primary key serves as a unique identifier for each row or record in a given table. The primary key is literally an id value for a record.
We're going to use this value to connect artists to the albums they have produced.
By specifying that the id column is the PRIMARY KEY, SQL makes sure that:
    -None of the values in this column are NULL
    -Each value in this column is unique

A table can NOT have more than one PRIMARY KEY column.

A foreign key is a column that contains the primary key of another table in the database. 
We use foreign keys and primary keys to connect rows in two different tables. 
One table's foreign key holds the value of another table's primary key. 
Unlike primary keys, foreign keys do not need to be unique and can be NULL.

【SELECT  * FROM albums JOIN artists ON  albums.artist_id = artists.id;】
In SQL, joins are used to combine rows from two or more tables. The most common type of join in SQL is an inner join.
An inner join will combine rows from different tables if the join condition is true. 

【SELECT  * FROM albums LEFT JOIN artists ON  albums.artist_id = artists.id;】
ex：并不是所有的album都有对应的artist，left join 将符合条件的artist并入到albums（左边的table），没有的则为null
Outer joins also combine rows from two or more tables, but unlike inner joins, they do not require the join condition to be met. 
Instead, every row in the left table is returned in the result set, and if the join condition is not met, then NULL values are used to fill in the columns from the right table.

--------------------------------------------------------------------------------------
Review:
 -   Primary Key is a column that serves a unique identifier for row in the table. Values in this column must be unique and cannot be NULL.
 -   Foreign Key is a column that contains the primary key to another table in the database. It is used to identify a particular row in the referenced table.
 -   Joins are used in SQL to combine data from multiple tables.
 -   INNER JOIN will combine rows from different tables if the join condition is true.
 -   LEFT OUTER JOIN will return every row in the left table, and if the join condition is not met, NULL values are used to fill in the columns from the right table.
 -   AS is a keyword in SQL that allows you to rename a column or table in the result set using an alias.
